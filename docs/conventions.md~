
Contributing to KobraPy
==============================
 
 KobraPy is open source and you are welcome and encouraged to contribute.

 These are a few guidelines.

 Contribution workflow
 ------------------------------

 The official KobraPy repository is at https://github.com/monaco/kobrapy
   
 To start contributing, make sure you've read the essential documentation
 thoroughly:

    - `docs/manual.md`
    - `docs/CONTRIBUTING.md`  (this file)

 Then, go through the following steps.

 1. Open an issue at the repository explaining the problem
 
    or suggestion you are addressing.

 2. If you want to contribute a solution for your (or anyone else's) issue:

    * fork the project
    * create a branch for the issue
    * make your changes in that branch
    * create a pull request

    Do not submit a PR/MR that is not related to an open issue.

    Make sure your contribution comply with the conventions adopted
    in this project (see below).

 3. Go have a treat—you’ve earned it.

 Project standards
 ------------------------------

 To keep things consistent, when applicable, we aim at some some standards.

 - REUSE specification vr. 3 [1]
 
 - GitFlow branching strategy [2]

 - Semantic versioning 2.0.0 [3]

 Code convention
 ------------------------------
 
 * Symbol names, comments, file names etc. always in English.

 * Casing, indentation, block alignment etc.: stick to the common conventions.

 * Comments are text. Use caption and punctuation accordingly.

 * Please follow the project’s code style for consistency.

 Attribution and licensing
 ------------------------------

 If you have substantially modified an existing source or documentation
 file --- say it's considerably more than a simple typo correction or
 small bug fix --- you are entitled to have your name added to the copyright
 notice [1] and to the `AUTHORS` file, should you desire.

 By submitting your contribution you agree that it will be available under the
 same license as KobraPy (GNU GPL vr. 3 or later).

 Branch naming
 ------------------------------

 When applicable, use the following convention for commit messages and branch
 names:

 PERMANENT BRANCHES

 The repository contains the two GitFlow permanent branches:
 
 - `main`   : the stable branch 
 - `dev`    : the unstable branch (aka `develop`)

 SUPPORT BRANCH NAMES (for PR/MR)

 When creating an ephemeral branch, use the following keywords to indicate which
 other branch your PR should be applied to:

 - `feat`  : new feature of bug fix for the feature branch
 - `hot`   : hot fix for the main branch
 - `rel`   : new release preparation (GitFlow `release`)
 - `wip`   : work-in-progress branch (unrelated to any issue)

 For `feat` and `hot` PRs, use this scheme for branch names

 ```
    <type>/<issue-number>/<short-descriptive-note>
 ```
 Use lowercase alphanumeric ASCII characters, underscores, and hyphens in
 place of spaces. No punctuation.

  Example:

 ```
  feat/42/modify-option-help

  fix/66/crash-on-negative-input

 ```

 For `rel` branches, use `rel/<release-number>`.
 
 For `wip` use `wip/<short-description>`

 Commit messages
 ------------------------------
 
 When editing the commit message, use the form

 ```
 tag : short description
 ```

 The `tag` part describes the purpose of your commit

 - `code`     :   advance code (add of modify a feature)
 - `doc`      :   modify or extend documentation
 - `build`    :   improve the build process
 - `repo`     :   tide up the repository and organization
 - `minor`    :   something too simple as typo or cosmetics
 - `other`    :   something else

 For the `short description`, use the imperative form (fix, add, removes...)

Example:

 ```
   fix: correct wrong file name

   fix: fix missing semicolon

   doc: update user manual

   repo: removed object files

 ```

 If your commit addressed more than one purpose, use multiple commit messages,
 one per line.
 
 If it helps to understand the context, do not refrain from adding a paragraph
 (after a blank line) further explaining the commit. This is normal text, so,
 capitalize and punctuate accordingly.
 
 OTHER CONVENTIONS

 Compliance to Keep a ChangeLog [5] is under consideration.


 References
 ------------------------------

 [1] REUSE Software, https://reuse.software

 [2] GitFlow, https://nvie.com/posts/a-successful-git-branching-model/

 [3] Semantic Versioning, https://semver.org/

 [4] Conventional Commits, https://www.conventionalcommits.org/en/v1.0.0/

 [5] Keep a ChangeLog, https://keepachangelog.com/en/1.0.0/


